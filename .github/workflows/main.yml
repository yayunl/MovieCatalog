name: CI/CD

on: [push]

env:
  WEB_IMAGE: docker.pkg.github.com/$GITHUB_REPOSITORY/web:latest
  NGINX_IMAGE: docker.pkg.github.com/$GITHUB_REPOSITORY/moviecatalog-nginx:latest

jobs:

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
      - name: Add environment variables to .env
        run: |
          echo DEBUG=0 >> .env
          echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env

          echo DATABASE=postgres >> .env
          echo SQL_ENGINE=django.db.backends.postgresql >> .env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
          echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> .env
          echo SQL_USER=${{ secrets.SQL_USER }} >> .env
          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env
          echo SQL_HOST=${{ secrets.SQL_HOST }} >> .env
          echo SQL_PORT=${{ secrets.SQL_PORT }} >> .env

          echo POSTGRES_DB=${{ secrets.SQL_DATABASE }} >> .env
          echo POSTGRES_USER=${{ secrets.SQL_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.SQL_PASSWORD }} >> .env

          echo PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }} >> .env
          echo PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }} >> .env

      - name: Set environment variables
        run: |
          echo ::set-env name=WEB_IMAGE::${{ env.WEB_IMAGE }}
          echo ::set-env name=NGINX_IMAGE::${{ env.NGINX_IMAGE }}
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ env.WEB_IMAGE }} || true
          docker pull ${{ env.NGINX_IMAGE }} || true
      - name: Build images
        run: |
          docker build -f _build_web_prod_image.yml build
          docker build -f _build_nginx_prod_image.yml build
      - name: Push images
        run: |
          docker push ${{ env.WEB_IMAGE }}
          docker push ${{ env.NGINX_IMAGE }}


  test:
    name: Test Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Run pytest
        env:
          POSTGRES_DB: users
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: runner
          DATABASE_TEST_URL: postgres://runner:runner@postgres:5432/users
        run: |
          cd /usr/src/app
          pytest -p no:warnings --cov=.
          flake8 .
          black --check --exclude=migrations .
          isort ./*/*.py --check-only
